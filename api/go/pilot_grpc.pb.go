// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilot.proto

package pilot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PilotService_CreateBehavior_FullMethodName  = "/skiff.pilot.PilotService/CreateBehavior"
	PilotService_ProvokeBehavior_FullMethodName = "/skiff.pilot.PilotService/ProvokeBehavior"
)

// PilotServiceClient is the client API for PilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PilotServiceClient interface {
	CreateBehavior(ctx context.Context, in *CreateBehavior_Request, opts ...grpc.CallOption) (*CreateBehavior_Response, error)
	ProvokeBehavior(ctx context.Context, in *ProvokeBehavior_Request, opts ...grpc.CallOption) (*ProvokeBehavior_Response, error)
}

type pilotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPilotServiceClient(cc grpc.ClientConnInterface) PilotServiceClient {
	return &pilotServiceClient{cc}
}

func (c *pilotServiceClient) CreateBehavior(ctx context.Context, in *CreateBehavior_Request, opts ...grpc.CallOption) (*CreateBehavior_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBehavior_Response)
	err := c.cc.Invoke(ctx, PilotService_CreateBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) ProvokeBehavior(ctx context.Context, in *ProvokeBehavior_Request, opts ...grpc.CallOption) (*ProvokeBehavior_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvokeBehavior_Response)
	err := c.cc.Invoke(ctx, PilotService_ProvokeBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PilotServiceServer is the server API for PilotService service.
// All implementations should embed UnimplementedPilotServiceServer
// for forward compatibility.
type PilotServiceServer interface {
	CreateBehavior(context.Context, *CreateBehavior_Request) (*CreateBehavior_Response, error)
	ProvokeBehavior(context.Context, *ProvokeBehavior_Request) (*ProvokeBehavior_Response, error)
}

// UnimplementedPilotServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPilotServiceServer struct{}

func (UnimplementedPilotServiceServer) CreateBehavior(context.Context, *CreateBehavior_Request) (*CreateBehavior_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBehavior not implemented")
}
func (UnimplementedPilotServiceServer) ProvokeBehavior(context.Context, *ProvokeBehavior_Request) (*ProvokeBehavior_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvokeBehavior not implemented")
}
func (UnimplementedPilotServiceServer) testEmbeddedByValue() {}

// UnsafePilotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PilotServiceServer will
// result in compilation errors.
type UnsafePilotServiceServer interface {
	mustEmbedUnimplementedPilotServiceServer()
}

func RegisterPilotServiceServer(s grpc.ServiceRegistrar, srv PilotServiceServer) {
	// If the following call pancis, it indicates UnimplementedPilotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PilotService_ServiceDesc, srv)
}

func _PilotService_CreateBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBehavior_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).CreateBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PilotService_CreateBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).CreateBehavior(ctx, req.(*CreateBehavior_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_ProvokeBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvokeBehavior_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).ProvokeBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PilotService_ProvokeBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).ProvokeBehavior(ctx, req.(*ProvokeBehavior_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PilotService_ServiceDesc is the grpc.ServiceDesc for PilotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PilotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skiff.pilot.PilotService",
	HandlerType: (*PilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBehavior",
			Handler:    _PilotService_CreateBehavior_Handler,
		},
		{
			MethodName: "ProvokeBehavior",
			Handler:    _PilotService_ProvokeBehavior_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pilot.proto",
}
