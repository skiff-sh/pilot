// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pilot/pilot.proto

package pilot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBehavior with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBehavior) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBehavior with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateBehaviorMultiError,
// or nil if none found.
func (m *CreateBehavior) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBehavior) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBehaviorMultiError(errors)
	}

	return nil
}

// CreateBehaviorMultiError is an error wrapping multiple validation errors
// returned by CreateBehavior.ValidateAll() if the designated constraints
// aren't met.
type CreateBehaviorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBehaviorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBehaviorMultiError) AllErrors() []error { return m }

// CreateBehaviorValidationError is the validation error returned by
// CreateBehavior.Validate if the designated constraints aren't met.
type CreateBehaviorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBehaviorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBehaviorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBehaviorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBehaviorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBehaviorValidationError) ErrorName() string { return "CreateBehaviorValidationError" }

// Error satisfies the builtin error interface
func (e CreateBehaviorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBehavior.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBehaviorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBehaviorValidationError{}

// Validate checks the field values on ProvokeBehavior with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProvokeBehavior) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvokeBehavior with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvokeBehaviorMultiError, or nil if none found.
func (m *ProvokeBehavior) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvokeBehavior) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProvokeBehaviorMultiError(errors)
	}

	return nil
}

// ProvokeBehaviorMultiError is an error wrapping multiple validation errors
// returned by ProvokeBehavior.ValidateAll() if the designated constraints
// aren't met.
type ProvokeBehaviorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvokeBehaviorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvokeBehaviorMultiError) AllErrors() []error { return m }

// ProvokeBehaviorValidationError is the validation error returned by
// ProvokeBehavior.Validate if the designated constraints aren't met.
type ProvokeBehaviorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvokeBehaviorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvokeBehaviorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvokeBehaviorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvokeBehaviorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvokeBehaviorValidationError) ErrorName() string { return "ProvokeBehaviorValidationError" }

// Error satisfies the builtin error interface
func (e ProvokeBehaviorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvokeBehavior.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvokeBehaviorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvokeBehaviorValidationError{}

// Validate checks the field values on Behavior with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Behavior) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Behavior with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BehaviorMultiError, or nil
// if none found.
func (m *Behavior) ValidateAll() error {
	return m.validate(true)
}

func (m *Behavior) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTendencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BehaviorValidationError{
						field:  fmt.Sprintf("Tendencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BehaviorValidationError{
						field:  fmt.Sprintf("Tendencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BehaviorValidationError{
					field:  fmt.Sprintf("Tendencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	if len(errors) > 0 {
		return BehaviorMultiError(errors)
	}

	return nil
}

// BehaviorMultiError is an error wrapping multiple validation errors returned
// by Behavior.ValidateAll() if the designated constraints aren't met.
type BehaviorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BehaviorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BehaviorMultiError) AllErrors() []error { return m }

// BehaviorValidationError is the validation error returned by
// Behavior.Validate if the designated constraints aren't met.
type BehaviorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BehaviorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BehaviorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BehaviorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BehaviorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BehaviorValidationError) ErrorName() string { return "BehaviorValidationError" }

// Error satisfies the builtin error interface
func (e BehaviorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBehavior.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BehaviorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BehaviorValidationError{}

// Validate checks the field values on Tendency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tendency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tendency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TendencyMultiError, or nil
// if none found.
func (m *Tendency) ValidateAll() error {
	return m.validate(true)
}

func (m *Tendency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TendencyValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TendencyValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TendencyValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.If != nil {
		// no validation rules for If
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return TendencyMultiError(errors)
	}

	return nil
}

// TendencyMultiError is an error wrapping multiple validation errors returned
// by Tendency.ValidateAll() if the designated constraints aren't met.
type TendencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TendencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TendencyMultiError) AllErrors() []error { return m }

// TendencyValidationError is the validation error returned by
// Tendency.Validate if the designated constraints aren't met.
type TendencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TendencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TendencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TendencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TendencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TendencyValidationError) ErrorName() string { return "TendencyValidationError" }

// Error satisfies the builtin error interface
func (e TendencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTendency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TendencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TendencyValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActionMultiError, or nil if none found.
func (m *Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Wait != nil {

		if all {
			switch v := interface{}(m.GetWait()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "Wait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "Wait",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWait()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "Wait",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.HttpRequest != nil {

		if all {
			switch v := interface{}(m.GetHttpRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "HttpRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "HttpRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttpRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "HttpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SetStatus != nil {

		if all {
			switch v := interface{}(m.GetSetStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "SetStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "SetStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "SetStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SetResponseField != nil {

		if all {
			switch v := interface{}(m.GetSetResponseField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "SetResponseField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "SetResponseField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetResponseField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "SetResponseField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Exec != nil {

		if all {
			switch v := interface{}(m.GetExec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "Exec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionValidationError{
						field:  "Exec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "Exec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionMultiError(errors)
	}

	return nil
}

// ActionMultiError is an error wrapping multiple validation errors returned by
// Action.ValidateAll() if the designated constraints aren't met.
type ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionMultiError) AllErrors() []error { return m }

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutputMultiError, or nil if none found.
func (m *Output) ValidateAll() error {
	return m.validate(true)
}

func (m *Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HttpResponse != nil {

		if all {
			switch v := interface{}(m.GetHttpResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OutputValidationError{
						field:  "HttpResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OutputValidationError{
						field:  "HttpResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttpResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OutputValidationError{
					field:  "HttpResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExecOutput != nil {

		if all {
			switch v := interface{}(m.GetExecOutput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OutputValidationError{
						field:  "ExecOutput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OutputValidationError{
						field:  "ExecOutput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecOutput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OutputValidationError{
					field:  "ExecOutput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OutputMultiError(errors)
	}

	return nil
}

// OutputMultiError is an error wrapping multiple validation errors returned by
// Output.ValidateAll() if the designated constraints aren't met.
type OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputMultiError) AllErrors() []error { return m }

// OutputValidationError is the validation error returned by Output.Validate if
// the designated constraints aren't met.
type OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputValidationError) ErrorName() string { return "OutputValidationError" }

// Error satisfies the builtin error interface
func (e OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputValidationError{}

// Validate checks the field values on CreateBehavior_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBehavior_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBehavior_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBehavior_RequestMultiError, or nil if none found.
func (m *CreateBehavior_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBehavior_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBehavior()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBehavior_RequestValidationError{
					field:  "Behavior",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBehavior_RequestValidationError{
					field:  "Behavior",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBehavior()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBehavior_RequestValidationError{
				field:  "Behavior",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBehavior_RequestMultiError(errors)
	}

	return nil
}

// CreateBehavior_RequestMultiError is an error wrapping multiple validation
// errors returned by CreateBehavior_Request.ValidateAll() if the designated
// constraints aren't met.
type CreateBehavior_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBehavior_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBehavior_RequestMultiError) AllErrors() []error { return m }

// CreateBehavior_RequestValidationError is the validation error returned by
// CreateBehavior_Request.Validate if the designated constraints aren't met.
type CreateBehavior_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBehavior_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBehavior_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBehavior_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBehavior_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBehavior_RequestValidationError) ErrorName() string {
	return "CreateBehavior_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBehavior_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBehavior_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBehavior_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBehavior_RequestValidationError{}

// Validate checks the field values on CreateBehavior_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBehavior_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBehavior_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBehavior_ResponseMultiError, or nil if none found.
func (m *CreateBehavior_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBehavior_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBehavior_ResponseMultiError(errors)
	}

	return nil
}

// CreateBehavior_ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBehavior_Response.ValidateAll() if the designated
// constraints aren't met.
type CreateBehavior_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBehavior_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBehavior_ResponseMultiError) AllErrors() []error { return m }

// CreateBehavior_ResponseValidationError is the validation error returned by
// CreateBehavior_Response.Validate if the designated constraints aren't met.
type CreateBehavior_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBehavior_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBehavior_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBehavior_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBehavior_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBehavior_ResponseValidationError) ErrorName() string {
	return "CreateBehavior_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBehavior_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBehavior_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBehavior_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBehavior_ResponseValidationError{}

// Validate checks the field values on ProvokeBehavior_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProvokeBehavior_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvokeBehavior_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvokeBehavior_RequestMultiError, or nil if none found.
func (m *ProvokeBehavior_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvokeBehavior_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ProvokeBehavior_RequestMultiError(errors)
	}

	return nil
}

// ProvokeBehavior_RequestMultiError is an error wrapping multiple validation
// errors returned by ProvokeBehavior_Request.ValidateAll() if the designated
// constraints aren't met.
type ProvokeBehavior_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvokeBehavior_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvokeBehavior_RequestMultiError) AllErrors() []error { return m }

// ProvokeBehavior_RequestValidationError is the validation error returned by
// ProvokeBehavior_Request.Validate if the designated constraints aren't met.
type ProvokeBehavior_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvokeBehavior_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvokeBehavior_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvokeBehavior_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvokeBehavior_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvokeBehavior_RequestValidationError) ErrorName() string {
	return "ProvokeBehavior_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProvokeBehavior_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvokeBehavior_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvokeBehavior_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvokeBehavior_RequestValidationError{}

// Validate checks the field values on ProvokeBehavior_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProvokeBehavior_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvokeBehavior_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProvokeBehavior_ResponseMultiError, or nil if none found.
func (m *ProvokeBehavior_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvokeBehavior_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProvokeBehavior_ResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProvokeBehavior_ResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProvokeBehavior_ResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProvokeBehavior_ResponseMultiError(errors)
	}

	return nil
}

// ProvokeBehavior_ResponseMultiError is an error wrapping multiple validation
// errors returned by ProvokeBehavior_Response.ValidateAll() if the designated
// constraints aren't met.
type ProvokeBehavior_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvokeBehavior_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvokeBehavior_ResponseMultiError) AllErrors() []error { return m }

// ProvokeBehavior_ResponseValidationError is the validation error returned by
// ProvokeBehavior_Response.Validate if the designated constraints aren't met.
type ProvokeBehavior_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvokeBehavior_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvokeBehavior_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvokeBehavior_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvokeBehavior_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvokeBehavior_ResponseValidationError) ErrorName() string {
	return "ProvokeBehavior_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProvokeBehavior_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvokeBehavior_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvokeBehavior_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvokeBehavior_ResponseValidationError{}

// Validate checks the field values on Action_HTTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Action_HTTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action_HTTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Action_HTTPRequestMultiError, or nil if none found.
func (m *Action_HTTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Action_HTTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Headers

	// no validation rules for Body

	if len(errors) > 0 {
		return Action_HTTPRequestMultiError(errors)
	}

	return nil
}

// Action_HTTPRequestMultiError is an error wrapping multiple validation errors
// returned by Action_HTTPRequest.ValidateAll() if the designated constraints
// aren't met.
type Action_HTTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Action_HTTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Action_HTTPRequestMultiError) AllErrors() []error { return m }

// Action_HTTPRequestValidationError is the validation error returned by
// Action_HTTPRequest.Validate if the designated constraints aren't met.
type Action_HTTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Action_HTTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Action_HTTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Action_HTTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Action_HTTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Action_HTTPRequestValidationError) ErrorName() string {
	return "Action_HTTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Action_HTTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction_HTTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Action_HTTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Action_HTTPRequestValidationError{}

// Validate checks the field values on Action_SetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Action_SetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action_SetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Action_SetStatusMultiError, or nil if none found.
func (m *Action_SetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *Action_SetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return Action_SetStatusMultiError(errors)
	}

	return nil
}

// Action_SetStatusMultiError is an error wrapping multiple validation errors
// returned by Action_SetStatus.ValidateAll() if the designated constraints
// aren't met.
type Action_SetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Action_SetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Action_SetStatusMultiError) AllErrors() []error { return m }

// Action_SetStatusValidationError is the validation error returned by
// Action_SetStatus.Validate if the designated constraints aren't met.
type Action_SetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Action_SetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Action_SetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Action_SetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Action_SetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Action_SetStatusValidationError) ErrorName() string { return "Action_SetStatusValidationError" }

// Error satisfies the builtin error interface
func (e Action_SetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction_SetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Action_SetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Action_SetStatusValidationError{}

// Validate checks the field values on Action_SetResponseField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Action_SetResponseField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action_SetResponseField with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Action_SetResponseFieldMultiError, or nil if none found.
func (m *Action_SetResponseField) ValidateAll() error {
	return m.validate(true)
}

func (m *Action_SetResponseField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	if len(errors) > 0 {
		return Action_SetResponseFieldMultiError(errors)
	}

	return nil
}

// Action_SetResponseFieldMultiError is an error wrapping multiple validation
// errors returned by Action_SetResponseField.ValidateAll() if the designated
// constraints aren't met.
type Action_SetResponseFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Action_SetResponseFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Action_SetResponseFieldMultiError) AllErrors() []error { return m }

// Action_SetResponseFieldValidationError is the validation error returned by
// Action_SetResponseField.Validate if the designated constraints aren't met.
type Action_SetResponseFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Action_SetResponseFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Action_SetResponseFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Action_SetResponseFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Action_SetResponseFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Action_SetResponseFieldValidationError) ErrorName() string {
	return "Action_SetResponseFieldValidationError"
}

// Error satisfies the builtin error interface
func (e Action_SetResponseFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction_SetResponseField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Action_SetResponseFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Action_SetResponseFieldValidationError{}

// Validate checks the field values on Action_Exec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action_Exec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action_Exec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Action_ExecMultiError, or
// nil if none found.
func (m *Action_Exec) ValidateAll() error {
	return m.validate(true)
}

func (m *Action_Exec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Command

	// no validation rules for EnvVars

	// no validation rules for WorkingDir

	if len(errors) > 0 {
		return Action_ExecMultiError(errors)
	}

	return nil
}

// Action_ExecMultiError is an error wrapping multiple validation errors
// returned by Action_Exec.ValidateAll() if the designated constraints aren't met.
type Action_ExecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Action_ExecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Action_ExecMultiError) AllErrors() []error { return m }

// Action_ExecValidationError is the validation error returned by
// Action_Exec.Validate if the designated constraints aren't met.
type Action_ExecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Action_ExecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Action_ExecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Action_ExecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Action_ExecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Action_ExecValidationError) ErrorName() string { return "Action_ExecValidationError" }

// Error satisfies the builtin error interface
func (e Action_ExecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction_Exec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Action_ExecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Action_ExecValidationError{}

// Validate checks the field values on Output_HTTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Output_HTTPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output_HTTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Output_HTTPResponseMultiError, or nil if none found.
func (m *Output_HTTPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Output_HTTPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Output_HTTPResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Output_HTTPResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Output_HTTPResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Proto

	// no validation rules for ProtoMajor

	// no validation rules for ProtoMinor

	// no validation rules for Headers

	// no validation rules for ContentLength

	// no validation rules for BodyRaw

	if len(errors) > 0 {
		return Output_HTTPResponseMultiError(errors)
	}

	return nil
}

// Output_HTTPResponseMultiError is an error wrapping multiple validation
// errors returned by Output_HTTPResponse.ValidateAll() if the designated
// constraints aren't met.
type Output_HTTPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Output_HTTPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Output_HTTPResponseMultiError) AllErrors() []error { return m }

// Output_HTTPResponseValidationError is the validation error returned by
// Output_HTTPResponse.Validate if the designated constraints aren't met.
type Output_HTTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Output_HTTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Output_HTTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Output_HTTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Output_HTTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Output_HTTPResponseValidationError) ErrorName() string {
	return "Output_HTTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Output_HTTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput_HTTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Output_HTTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Output_HTTPResponseValidationError{}

// Validate checks the field values on Output_ExecOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Output_ExecOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output_ExecOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Output_ExecOutputMultiError, or nil if none found.
func (m *Output_ExecOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *Output_ExecOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stdout

	// no validation rules for Stderr

	// no validation rules for ExitCode

	if len(errors) > 0 {
		return Output_ExecOutputMultiError(errors)
	}

	return nil
}

// Output_ExecOutputMultiError is an error wrapping multiple validation errors
// returned by Output_ExecOutput.ValidateAll() if the designated constraints
// aren't met.
type Output_ExecOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Output_ExecOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Output_ExecOutputMultiError) AllErrors() []error { return m }

// Output_ExecOutputValidationError is the validation error returned by
// Output_ExecOutput.Validate if the designated constraints aren't met.
type Output_ExecOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Output_ExecOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Output_ExecOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Output_ExecOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Output_ExecOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Output_ExecOutputValidationError) ErrorName() string {
	return "Output_ExecOutputValidationError"
}

// Error satisfies the builtin error interface
func (e Output_ExecOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput_ExecOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Output_ExecOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Output_ExecOutputValidationError{}
