// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: pilot/pilot.proto

package pilot

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateBehavior struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBehavior) Reset() {
	*x = CreateBehavior{}
	mi := &file_pilot_pilot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBehavior) ProtoMessage() {}

func (x *CreateBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBehavior.ProtoReflect.Descriptor instead.
func (*CreateBehavior) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{0}
}

type ProvokeBehavior struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvokeBehavior) Reset() {
	*x = ProvokeBehavior{}
	mi := &file_pilot_pilot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvokeBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvokeBehavior) ProtoMessage() {}

func (x *ProvokeBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvokeBehavior.ProtoReflect.Descriptor instead.
func (*ProvokeBehavior) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{1}
}

type Behavior struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Tendencies []*Tendency            `protobuf:"bytes,1,rep,name=tendencies,proto3" json:"tendencies,omitempty"`
	// The referential name of the Behavior.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Behavior) Reset() {
	*x = Behavior{}
	mi := &file_pilot_pilot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Behavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Behavior) ProtoMessage() {}

func (x *Behavior) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Behavior.ProtoReflect.Descriptor instead.
func (*Behavior) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{2}
}

func (x *Behavior) GetTendencies() []*Tendency {
	if x != nil {
		return x.Tendencies
	}
	return nil
}

func (x *Behavior) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tendency struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Action *Action                `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// Trigger this behavior if a truthy statement is set here.
	If *string `protobuf:"bytes,2,opt,name=if,proto3,oneof" json:"if,omitempty"`
	// Referential ID.
	Id            *string `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tendency) Reset() {
	*x = Tendency{}
	mi := &file_pilot_pilot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tendency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tendency) ProtoMessage() {}

func (x *Tendency) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tendency.ProtoReflect.Descriptor instead.
func (*Tendency) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{3}
}

func (x *Tendency) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Tendency) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

func (x *Tendency) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Polymorphic message representing an action to be performed.
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Wait for a specified amount of time.
	Wait *durationpb.Duration `protobuf:"bytes,1,opt,name=wait,proto3,oneof" json:"wait,omitempty"`
	// Dispatch HTTP request. Outputs an HTTP Response.
	HttpRequest *Action_HTTPRequest `protobuf:"bytes,2,opt,name=http_request,proto3,oneof" json:"http_request,omitempty"`
	// Set the status to send in the response to the behavior. If not called, defaults
	// to code OK.
	SetStatus *Action_SetStatus `protobuf:"bytes,3,opt,name=set_status,proto3,oneof" json:"set_status,omitempty"`
	// Set a field on the final response object.
	SetResponseField *Action_SetResponseField `protobuf:"bytes,4,opt,name=set_response_field,proto3,oneof" json:"set_response_field,omitempty"`
	// Perform a shell command.
	Exec          *Action_Exec `protobuf:"bytes,5,opt,name=exec,proto3,oneof" json:"exec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_pilot_pilot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{4}
}

func (x *Action) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *Action) GetHttpRequest() *Action_HTTPRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *Action) GetSetStatus() *Action_SetStatus {
	if x != nil {
		return x.SetStatus
	}
	return nil
}

func (x *Action) GetSetResponseField() *Action_SetResponseField {
	if x != nil {
		return x.SetResponseField
	}
	return nil
}

func (x *Action) GetExec() *Action_Exec {
	if x != nil {
		return x.Exec
	}
	return nil
}

// A polymorphic message to represent the outputs of actions.
type Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set if the action was an HTTP request.
	HttpResponse *Output_HTTPResponse `protobuf:"bytes,1,opt,name=http_response,proto3,oneof" json:"http_response,omitempty"`
	// Set if the action was an exec.
	ExecOutput    *Output_ExecOutput `protobuf:"bytes,2,opt,name=exec_output,proto3,oneof" json:"exec_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_pilot_pilot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{5}
}

func (x *Output) GetHttpResponse() *Output_HTTPResponse {
	if x != nil {
		return x.HttpResponse
	}
	return nil
}

func (x *Output) GetExecOutput() *Output_ExecOutput {
	if x != nil {
		return x.ExecOutput
	}
	return nil
}

type CreateBehavior_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Behavior      *Behavior              `protobuf:"bytes,1,opt,name=behavior,proto3" json:"behavior,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBehavior_Request) Reset() {
	*x = CreateBehavior_Request{}
	mi := &file_pilot_pilot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBehavior_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBehavior_Request) ProtoMessage() {}

func (x *CreateBehavior_Request) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBehavior_Request.ProtoReflect.Descriptor instead.
func (*CreateBehavior_Request) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateBehavior_Request) GetBehavior() *Behavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

type CreateBehavior_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBehavior_Response) Reset() {
	*x = CreateBehavior_Response{}
	mi := &file_pilot_pilot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBehavior_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBehavior_Response) ProtoMessage() {}

func (x *CreateBehavior_Response) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBehavior_Response.ProtoReflect.Descriptor instead.
func (*CreateBehavior_Response) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{0, 1}
}

type ProvokeBehavior_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the behavior
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvokeBehavior_Request) Reset() {
	*x = ProvokeBehavior_Request{}
	mi := &file_pilot_pilot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvokeBehavior_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvokeBehavior_Request) ProtoMessage() {}

func (x *ProvokeBehavior_Request) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvokeBehavior_Request.ProtoReflect.Descriptor instead.
func (*ProvokeBehavior_Request) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ProvokeBehavior_Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProvokeBehavior_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Body          *structpb.Struct       `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProvokeBehavior_Response) Reset() {
	*x = ProvokeBehavior_Response{}
	mi := &file_pilot_pilot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvokeBehavior_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvokeBehavior_Response) ProtoMessage() {}

func (x *ProvokeBehavior_Response) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvokeBehavior_Response.ProtoReflect.Descriptor instead.
func (*ProvokeBehavior_Response) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ProvokeBehavior_Response) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

// Sends an HTTP request.
type Action_HTTPRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Url     string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method  string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Headers map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If set, it is recommended to define the Content-Type header. If it is not set,
	// and the body is not empty, pilot will make its best guess as to what the
	// Content-Type should be.
	Body          []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action_HTTPRequest) Reset() {
	*x = Action_HTTPRequest{}
	mi := &file_pilot_pilot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action_HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_HTTPRequest) ProtoMessage() {}

func (x *Action_HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_HTTPRequest.ProtoReflect.Descriptor instead.
func (*Action_HTTPRequest) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Action_HTTPRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Action_HTTPRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Action_HTTPRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Action_HTTPRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// Responds with a gRPC status.
type Action_SetStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A gRPC status code -> https://grpc.io/docs/guides/status-codes/
	Code          uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action_SetStatus) Reset() {
	*x = Action_SetStatus{}
	mi := &file_pilot_pilot_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action_SetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SetStatus) ProtoMessage() {}

func (x *Action_SetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SetStatus.ProtoReflect.Descriptor instead.
func (*Action_SetStatus) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Action_SetStatus) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Action_SetStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Sets a field in the final response to the caller of the behavior.
type Action_SetResponseField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action_SetResponseField) Reset() {
	*x = Action_SetResponseField{}
	mi := &file_pilot_pilot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action_SetResponseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_SetResponseField) ProtoMessage() {}

func (x *Action_SetResponseField) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_SetResponseField.ProtoReflect.Descriptor instead.
func (*Action_SetResponseField) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Action_SetResponseField) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Action_SetResponseField) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type Action_Exec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	EnvVars       map[string]string      `protobuf:"bytes,3,rep,name=env_vars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkingDir    string                 `protobuf:"bytes,4,opt,name=working_dir,proto3" json:"working_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action_Exec) Reset() {
	*x = Action_Exec{}
	mi := &file_pilot_pilot_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action_Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Exec) ProtoMessage() {}

func (x *Action_Exec) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Exec.ProtoReflect.Descriptor instead.
func (*Action_Exec) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Action_Exec) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Action_Exec) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Action_Exec) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *Action_Exec) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type Output_HTTPResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// If the response is a json val, it is unmarshalled into a generic map.
	Body       *structpb.Struct `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Proto      string           `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	ProtoMajor int32            `protobuf:"varint,4,opt,name=proto_major,proto3" json:"proto_major,omitempty"`
	ProtoMinor int32            `protobuf:"varint,5,opt,name=proto_minor,proto3" json:"proto_minor,omitempty"`
	// The official HTTP spec allows for list of values but we're just going to support
	// the first one.
	Headers       map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ContentLength int64             `protobuf:"varint,7,opt,name=content_length,proto3" json:"content_length,omitempty"`
	BodyRaw       []byte            `protobuf:"bytes,8,opt,name=body_raw,proto3" json:"body_raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output_HTTPResponse) Reset() {
	*x = Output_HTTPResponse{}
	mi := &file_pilot_pilot_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_HTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_HTTPResponse) ProtoMessage() {}

func (x *Output_HTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_HTTPResponse.ProtoReflect.Descriptor instead.
func (*Output_HTTPResponse) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Output_HTTPResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Output_HTTPResponse) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Output_HTTPResponse) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Output_HTTPResponse) GetProtoMajor() int32 {
	if x != nil {
		return x.ProtoMajor
	}
	return 0
}

func (x *Output_HTTPResponse) GetProtoMinor() int32 {
	if x != nil {
		return x.ProtoMinor
	}
	return 0
}

func (x *Output_HTTPResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Output_HTTPResponse) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *Output_HTTPResponse) GetBodyRaw() []byte {
	if x != nil {
		return x.BodyRaw
	}
	return nil
}

type Output_ExecOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stdout        string                 `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string                 `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ExitCode      int32                  `protobuf:"varint,3,opt,name=exit_code,proto3" json:"exit_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output_ExecOutput) Reset() {
	*x = Output_ExecOutput{}
	mi := &file_pilot_pilot_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_ExecOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_ExecOutput) ProtoMessage() {}

func (x *Output_ExecOutput) ProtoReflect() protoreflect.Message {
	mi := &file_pilot_pilot_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_ExecOutput.ProtoReflect.Descriptor instead.
func (*Output_ExecOutput) Descriptor() ([]byte, []int) {
	return file_pilot_pilot_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Output_ExecOutput) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Output_ExecOutput) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Output_ExecOutput) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

var File_pilot_pilot_proto protoreflect.FileDescriptor

var file_pilot_pilot_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x1a, 0x44, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x69,
	0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x69, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x1a, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x67, 0x0a, 0x08, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x69,
	0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x66, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xe6, 0x07, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6b, 0x69, 0x66,
	0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x03, 0x52, 0x12, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x48, 0x04, 0x52, 0x04,
	0x65, 0x78, 0x65, 0x63, 0x88, 0x01, 0x01, 0x1a, 0xdf, 0x01, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a,
	0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x09, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x46, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0xdd, 0x01, 0x0a,
	0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x65,
	0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72,
	0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x22, 0x93, 0x05, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0xf6, 0x02, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61,
	0x77, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0xcb, 0x01, 0x0a, 0x0c,
	0x50, 0x69, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x23,
	0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x76, 0x6f, 0x6b, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x73,
	0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x6f,
	0x6b, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x92, 0x01, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x42, 0x0a, 0x50,
	0x69, 0x6c, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x69, 0x66, 0x66, 0x2d, 0x73, 0x68,
	0x2f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0xa2, 0x02, 0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x0b, 0x53, 0x6b, 0x69, 0x66,
	0x66, 0x2e, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0xca, 0x02, 0x0b, 0x53, 0x6b, 0x69, 0x66, 0x66, 0x5c,
	0x50, 0x69, 0x6c, 0x6f, 0x74, 0xe2, 0x02, 0x17, 0x53, 0x6b, 0x69, 0x66, 0x66, 0x5c, 0x50, 0x69,
	0x6c, 0x6f, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0c, 0x53, 0x6b, 0x69, 0x66, 0x66, 0x3a, 0x3a, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pilot_pilot_proto_rawDescOnce sync.Once
	file_pilot_pilot_proto_rawDescData = file_pilot_pilot_proto_rawDesc
)

func file_pilot_pilot_proto_rawDescGZIP() []byte {
	file_pilot_pilot_proto_rawDescOnce.Do(func() {
		file_pilot_pilot_proto_rawDescData = protoimpl.X.CompressGZIP(file_pilot_pilot_proto_rawDescData)
	})
	return file_pilot_pilot_proto_rawDescData
}

var file_pilot_pilot_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_pilot_pilot_proto_goTypes = []any{
	(*CreateBehavior)(nil),           // 0: skiff.pilot.CreateBehavior
	(*ProvokeBehavior)(nil),          // 1: skiff.pilot.ProvokeBehavior
	(*Behavior)(nil),                 // 2: skiff.pilot.Behavior
	(*Tendency)(nil),                 // 3: skiff.pilot.Tendency
	(*Action)(nil),                   // 4: skiff.pilot.Action
	(*Output)(nil),                   // 5: skiff.pilot.Output
	(*CreateBehavior_Request)(nil),   // 6: skiff.pilot.CreateBehavior.Request
	(*CreateBehavior_Response)(nil),  // 7: skiff.pilot.CreateBehavior.Response
	(*ProvokeBehavior_Request)(nil),  // 8: skiff.pilot.ProvokeBehavior.Request
	(*ProvokeBehavior_Response)(nil), // 9: skiff.pilot.ProvokeBehavior.Response
	(*Action_HTTPRequest)(nil),       // 10: skiff.pilot.Action.HTTPRequest
	(*Action_SetStatus)(nil),         // 11: skiff.pilot.Action.SetStatus
	(*Action_SetResponseField)(nil),  // 12: skiff.pilot.Action.SetResponseField
	(*Action_Exec)(nil),              // 13: skiff.pilot.Action.Exec
	nil,                              // 14: skiff.pilot.Action.HTTPRequest.HeadersEntry
	nil,                              // 15: skiff.pilot.Action.Exec.EnvVarsEntry
	(*Output_HTTPResponse)(nil),      // 16: skiff.pilot.Output.HTTPResponse
	(*Output_ExecOutput)(nil),        // 17: skiff.pilot.Output.ExecOutput
	nil,                              // 18: skiff.pilot.Output.HTTPResponse.HeadersEntry
	(*durationpb.Duration)(nil),      // 19: google.protobuf.Duration
	(*structpb.Struct)(nil),          // 20: google.protobuf.Struct
}
var file_pilot_pilot_proto_depIdxs = []int32{
	3,  // 0: skiff.pilot.Behavior.tendencies:type_name -> skiff.pilot.Tendency
	4,  // 1: skiff.pilot.Tendency.action:type_name -> skiff.pilot.Action
	19, // 2: skiff.pilot.Action.wait:type_name -> google.protobuf.Duration
	10, // 3: skiff.pilot.Action.http_request:type_name -> skiff.pilot.Action.HTTPRequest
	11, // 4: skiff.pilot.Action.set_status:type_name -> skiff.pilot.Action.SetStatus
	12, // 5: skiff.pilot.Action.set_response_field:type_name -> skiff.pilot.Action.SetResponseField
	13, // 6: skiff.pilot.Action.exec:type_name -> skiff.pilot.Action.Exec
	16, // 7: skiff.pilot.Output.http_response:type_name -> skiff.pilot.Output.HTTPResponse
	17, // 8: skiff.pilot.Output.exec_output:type_name -> skiff.pilot.Output.ExecOutput
	2,  // 9: skiff.pilot.CreateBehavior.Request.behavior:type_name -> skiff.pilot.Behavior
	20, // 10: skiff.pilot.ProvokeBehavior.Response.body:type_name -> google.protobuf.Struct
	14, // 11: skiff.pilot.Action.HTTPRequest.headers:type_name -> skiff.pilot.Action.HTTPRequest.HeadersEntry
	15, // 12: skiff.pilot.Action.Exec.env_vars:type_name -> skiff.pilot.Action.Exec.EnvVarsEntry
	20, // 13: skiff.pilot.Output.HTTPResponse.body:type_name -> google.protobuf.Struct
	18, // 14: skiff.pilot.Output.HTTPResponse.headers:type_name -> skiff.pilot.Output.HTTPResponse.HeadersEntry
	6,  // 15: skiff.pilot.PilotService.CreateBehavior:input_type -> skiff.pilot.CreateBehavior.Request
	8,  // 16: skiff.pilot.PilotService.ProvokeBehavior:input_type -> skiff.pilot.ProvokeBehavior.Request
	7,  // 17: skiff.pilot.PilotService.CreateBehavior:output_type -> skiff.pilot.CreateBehavior.Response
	9,  // 18: skiff.pilot.PilotService.ProvokeBehavior:output_type -> skiff.pilot.ProvokeBehavior.Response
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pilot_pilot_proto_init() }
func file_pilot_pilot_proto_init() {
	if File_pilot_pilot_proto != nil {
		return
	}
	file_pilot_pilot_proto_msgTypes[3].OneofWrappers = []any{}
	file_pilot_pilot_proto_msgTypes[4].OneofWrappers = []any{}
	file_pilot_pilot_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pilot_pilot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilot_pilot_proto_goTypes,
		DependencyIndexes: file_pilot_pilot_proto_depIdxs,
		MessageInfos:      file_pilot_pilot_proto_msgTypes,
	}.Build()
	File_pilot_pilot_proto = out.File
	file_pilot_pilot_proto_rawDesc = nil
	file_pilot_pilot_proto_goTypes = nil
	file_pilot_pilot_proto_depIdxs = nil
}
