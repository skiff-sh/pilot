// Code generated by mockery v2.50.0. DO NOT EDIT.

package behaviortypemocks

import (
	pilot "github.com/skiff-sh/pilot/api/go/pilot"
	mock "github.com/stretchr/testify/mock"

	template "github.com/skiff-sh/pilot/pkg/template"
)

// Output is an autogenerated mock type for the Output type
type Output struct {
	mock.Mock
}

type Output_Expecter struct {
	mock *mock.Mock
}

func (_m *Output) EXPECT() *Output_Expecter {
	return &Output_Expecter{mock: &_m.Mock}
}

// ToAPI provides a mock function with no fields
func (_m *Output) ToAPI() *pilot.Output {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToAPI")
	}

	var r0 *pilot.Output
	if rf, ok := ret.Get(0).(func() *pilot.Output); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pilot.Output)
		}
	}

	return r0
}

// Output_ToAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToAPI'
type Output_ToAPI_Call struct {
	*mock.Call
}

// ToAPI is a helper method to define mock.On call
func (_e *Output_Expecter) ToAPI() *Output_ToAPI_Call {
	return &Output_ToAPI_Call{Call: _e.mock.On("ToAPI")}
}

func (_c *Output_ToAPI_Call) Run(run func()) *Output_ToAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Output_ToAPI_Call) Return(_a0 *pilot.Output) *Output_ToAPI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Output_ToAPI_Call) RunAndReturn(run func() *pilot.Output) *Output_ToAPI_Call {
	_c.Call.Return(run)
	return _c
}

// ToRaw provides a mock function with no fields
func (_m *Output) ToRaw() template.Data {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToRaw")
	}

	var r0 template.Data
	if rf, ok := ret.Get(0).(func() template.Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template.Data)
		}
	}

	return r0
}

// Output_ToRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRaw'
type Output_ToRaw_Call struct {
	*mock.Call
}

// ToRaw is a helper method to define mock.On call
func (_e *Output_Expecter) ToRaw() *Output_ToRaw_Call {
	return &Output_ToRaw_Call{Call: _e.mock.On("ToRaw")}
}

func (_c *Output_ToRaw_Call) Run(run func()) *Output_ToRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Output_ToRaw_Call) Return(_a0 template.Data) *Output_ToRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Output_ToRaw_Call) RunAndReturn(run func() template.Data) *Output_ToRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutput creates a new instance of Output. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutput(t interface {
	mock.TestingT
	Cleanup(func())
}) *Output {
	mock := &Output{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
