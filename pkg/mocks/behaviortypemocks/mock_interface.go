// Code generated by mockery v2.50.0. DO NOT EDIT.

package behaviortypemocks

import (
	context "context"

	behaviortype "github.com/skiff-sh/pilot/pkg/behavior/behaviortype"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with no fields
func (_m *Interface) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Interface_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Interface_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Interface_Expecter) GetName() *Interface_GetName_Call {
	return &Interface_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Interface_GetName_Call) Run(run func()) *Interface_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_GetName_Call) Return(_a0 string) *Interface_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_GetName_Call) RunAndReturn(run func() string) *Interface_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Provoke provides a mock function with given fields: ctx
func (_m *Interface) Provoke(ctx context.Context) (*behaviortype.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Provoke")
	}

	var r0 *behaviortype.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*behaviortype.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *behaviortype.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*behaviortype.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_Provoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provoke'
type Interface_Provoke_Call struct {
	*mock.Call
}

// Provoke is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) Provoke(ctx interface{}) *Interface_Provoke_Call {
	return &Interface_Provoke_Call{Call: _e.mock.On("Provoke", ctx)}
}

func (_c *Interface_Provoke_Call) Run(run func(ctx context.Context)) *Interface_Provoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_Provoke_Call) Return(_a0 *behaviortype.Response, _a1 error) *Interface_Provoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_Provoke_Call) RunAndReturn(run func(context.Context) (*behaviortype.Response, error)) *Interface_Provoke_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
