// Code generated by mockery v2.50.0. DO NOT EDIT.

package behaviortypemocks

import (
	behaviortype "github.com/skiff-sh/pilot/pkg/behavior/behaviortype"
	mock "github.com/stretchr/testify/mock"
)

// Action is an autogenerated mock type for the Action type
type Action struct {
	mock.Mock
}

type Action_Expecter struct {
	mock *mock.Mock
}

func (_m *Action) EXPECT() *Action_Expecter {
	return &Action_Expecter{mock: &_m.Mock}
}

// Act provides a mock function with given fields: c
func (_m *Action) Act(c *behaviortype.Context) (behaviortype.Output, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Act")
	}

	var r0 behaviortype.Output
	var r1 error
	if rf, ok := ret.Get(0).(func(*behaviortype.Context) (behaviortype.Output, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*behaviortype.Context) behaviortype.Output); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(behaviortype.Output)
		}
	}

	if rf, ok := ret.Get(1).(func(*behaviortype.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Action_Act_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Act'
type Action_Act_Call struct {
	*mock.Call
}

// Act is a helper method to define mock.On call
//   - c *behaviortype.Context
func (_e *Action_Expecter) Act(c interface{}) *Action_Act_Call {
	return &Action_Act_Call{Call: _e.mock.On("Act", c)}
}

func (_c *Action_Act_Call) Run(run func(c *behaviortype.Context)) *Action_Act_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*behaviortype.Context))
	})
	return _c
}

func (_c *Action_Act_Call) Return(out behaviortype.Output, err error) *Action_Act_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *Action_Act_Call) RunAndReturn(run func(*behaviortype.Context) (behaviortype.Output, error)) *Action_Act_Call {
	_c.Call.Return(run)
	return _c
}

// NewAction creates a new instance of Action. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Action {
	mock := &Action{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
