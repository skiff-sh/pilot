// Code generated by mockery v2.50.0. DO NOT EDIT.

package pilotmocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pilot "github.com/skiff-sh/pilot/api/go/pilot"
)

// PilotServiceClient is an autogenerated mock type for the PilotServiceClient type
type PilotServiceClient struct {
	mock.Mock
}

type PilotServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PilotServiceClient) EXPECT() *PilotServiceClient_Expecter {
	return &PilotServiceClient_Expecter{mock: &_m.Mock}
}

// CreateBehavior provides a mock function with given fields: ctx, in, opts
func (_m *PilotServiceClient) CreateBehavior(ctx context.Context, in *pilot.CreateBehavior_Request, opts ...grpc.CallOption) (*pilot.CreateBehavior_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBehavior")
	}

	var r0 *pilot.CreateBehavior_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.CreateBehavior_Request, ...grpc.CallOption) (*pilot.CreateBehavior_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.CreateBehavior_Request, ...grpc.CallOption) *pilot.CreateBehavior_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pilot.CreateBehavior_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pilot.CreateBehavior_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PilotServiceClient_CreateBehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBehavior'
type PilotServiceClient_CreateBehavior_Call struct {
	*mock.Call
}

// CreateBehavior is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pilot.CreateBehavior_Request
//   - opts ...grpc.CallOption
func (_e *PilotServiceClient_Expecter) CreateBehavior(ctx interface{}, in interface{}, opts ...interface{}) *PilotServiceClient_CreateBehavior_Call {
	return &PilotServiceClient_CreateBehavior_Call{Call: _e.mock.On("CreateBehavior",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PilotServiceClient_CreateBehavior_Call) Run(run func(ctx context.Context, in *pilot.CreateBehavior_Request, opts ...grpc.CallOption)) *PilotServiceClient_CreateBehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pilot.CreateBehavior_Request), variadicArgs...)
	})
	return _c
}

func (_c *PilotServiceClient_CreateBehavior_Call) Return(_a0 *pilot.CreateBehavior_Response, _a1 error) *PilotServiceClient_CreateBehavior_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PilotServiceClient_CreateBehavior_Call) RunAndReturn(run func(context.Context, *pilot.CreateBehavior_Request, ...grpc.CallOption) (*pilot.CreateBehavior_Response, error)) *PilotServiceClient_CreateBehavior_Call {
	_c.Call.Return(run)
	return _c
}

// ProvokeBehavior provides a mock function with given fields: ctx, in, opts
func (_m *PilotServiceClient) ProvokeBehavior(ctx context.Context, in *pilot.ProvokeBehavior_Request, opts ...grpc.CallOption) (*pilot.ProvokeBehavior_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProvokeBehavior")
	}

	var r0 *pilot.ProvokeBehavior_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.ProvokeBehavior_Request, ...grpc.CallOption) (*pilot.ProvokeBehavior_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.ProvokeBehavior_Request, ...grpc.CallOption) *pilot.ProvokeBehavior_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pilot.ProvokeBehavior_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pilot.ProvokeBehavior_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PilotServiceClient_ProvokeBehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvokeBehavior'
type PilotServiceClient_ProvokeBehavior_Call struct {
	*mock.Call
}

// ProvokeBehavior is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pilot.ProvokeBehavior_Request
//   - opts ...grpc.CallOption
func (_e *PilotServiceClient_Expecter) ProvokeBehavior(ctx interface{}, in interface{}, opts ...interface{}) *PilotServiceClient_ProvokeBehavior_Call {
	return &PilotServiceClient_ProvokeBehavior_Call{Call: _e.mock.On("ProvokeBehavior",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *PilotServiceClient_ProvokeBehavior_Call) Run(run func(ctx context.Context, in *pilot.ProvokeBehavior_Request, opts ...grpc.CallOption)) *PilotServiceClient_ProvokeBehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pilot.ProvokeBehavior_Request), variadicArgs...)
	})
	return _c
}

func (_c *PilotServiceClient_ProvokeBehavior_Call) Return(_a0 *pilot.ProvokeBehavior_Response, _a1 error) *PilotServiceClient_ProvokeBehavior_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PilotServiceClient_ProvokeBehavior_Call) RunAndReturn(run func(context.Context, *pilot.ProvokeBehavior_Request, ...grpc.CallOption) (*pilot.ProvokeBehavior_Response, error)) *PilotServiceClient_ProvokeBehavior_Call {
	_c.Call.Return(run)
	return _c
}

// NewPilotServiceClient creates a new instance of PilotServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPilotServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PilotServiceClient {
	mock := &PilotServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
