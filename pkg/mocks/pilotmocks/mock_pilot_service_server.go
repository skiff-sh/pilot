// Code generated by mockery v2.50.0. DO NOT EDIT.

package pilotmocks

import (
	context "context"

	pilot "github.com/skiff-sh/pilot/api/go/pilot"
	mock "github.com/stretchr/testify/mock"
)

// PilotServiceServer is an autogenerated mock type for the PilotServiceServer type
type PilotServiceServer struct {
	mock.Mock
}

type PilotServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *PilotServiceServer) EXPECT() *PilotServiceServer_Expecter {
	return &PilotServiceServer_Expecter{mock: &_m.Mock}
}

// CreateBehavior provides a mock function with given fields: _a0, _a1
func (_m *PilotServiceServer) CreateBehavior(_a0 context.Context, _a1 *pilot.CreateBehavior_Request) (*pilot.CreateBehavior_Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBehavior")
	}

	var r0 *pilot.CreateBehavior_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.CreateBehavior_Request) (*pilot.CreateBehavior_Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.CreateBehavior_Request) *pilot.CreateBehavior_Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pilot.CreateBehavior_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pilot.CreateBehavior_Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PilotServiceServer_CreateBehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBehavior'
type PilotServiceServer_CreateBehavior_Call struct {
	*mock.Call
}

// CreateBehavior is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pilot.CreateBehavior_Request
func (_e *PilotServiceServer_Expecter) CreateBehavior(_a0 interface{}, _a1 interface{}) *PilotServiceServer_CreateBehavior_Call {
	return &PilotServiceServer_CreateBehavior_Call{Call: _e.mock.On("CreateBehavior", _a0, _a1)}
}

func (_c *PilotServiceServer_CreateBehavior_Call) Run(run func(_a0 context.Context, _a1 *pilot.CreateBehavior_Request)) *PilotServiceServer_CreateBehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pilot.CreateBehavior_Request))
	})
	return _c
}

func (_c *PilotServiceServer_CreateBehavior_Call) Return(_a0 *pilot.CreateBehavior_Response, _a1 error) *PilotServiceServer_CreateBehavior_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PilotServiceServer_CreateBehavior_Call) RunAndReturn(run func(context.Context, *pilot.CreateBehavior_Request) (*pilot.CreateBehavior_Response, error)) *PilotServiceServer_CreateBehavior_Call {
	_c.Call.Return(run)
	return _c
}

// ProvokeBehavior provides a mock function with given fields: _a0, _a1
func (_m *PilotServiceServer) ProvokeBehavior(_a0 context.Context, _a1 *pilot.ProvokeBehavior_Request) (*pilot.ProvokeBehavior_Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ProvokeBehavior")
	}

	var r0 *pilot.ProvokeBehavior_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.ProvokeBehavior_Request) (*pilot.ProvokeBehavior_Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pilot.ProvokeBehavior_Request) *pilot.ProvokeBehavior_Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pilot.ProvokeBehavior_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pilot.ProvokeBehavior_Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PilotServiceServer_ProvokeBehavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvokeBehavior'
type PilotServiceServer_ProvokeBehavior_Call struct {
	*mock.Call
}

// ProvokeBehavior is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pilot.ProvokeBehavior_Request
func (_e *PilotServiceServer_Expecter) ProvokeBehavior(_a0 interface{}, _a1 interface{}) *PilotServiceServer_ProvokeBehavior_Call {
	return &PilotServiceServer_ProvokeBehavior_Call{Call: _e.mock.On("ProvokeBehavior", _a0, _a1)}
}

func (_c *PilotServiceServer_ProvokeBehavior_Call) Run(run func(_a0 context.Context, _a1 *pilot.ProvokeBehavior_Request)) *PilotServiceServer_ProvokeBehavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pilot.ProvokeBehavior_Request))
	})
	return _c
}

func (_c *PilotServiceServer_ProvokeBehavior_Call) Return(_a0 *pilot.ProvokeBehavior_Response, _a1 error) *PilotServiceServer_ProvokeBehavior_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PilotServiceServer_ProvokeBehavior_Call) RunAndReturn(run func(context.Context, *pilot.ProvokeBehavior_Request) (*pilot.ProvokeBehavior_Response, error)) *PilotServiceServer_ProvokeBehavior_Call {
	_c.Call.Return(run)
	return _c
}

// NewPilotServiceServer creates a new instance of PilotServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPilotServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PilotServiceServer {
	mock := &PilotServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
